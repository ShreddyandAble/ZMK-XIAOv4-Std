/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//#include <behaviors/mouse_keys.dtsi>

#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    macros {
        Eduardo: Eduardo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(E) &kp D &kp U &kp A &kp R &kp D &kp O>;
            label = "EDUARDO";
        };

        VPCS202011: VPCS202011 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(V) &kp LS(P) &kp LS(C) &kp LS(S) &kp N2 &kp N0 &kp N2 &kp N0 &kp EXCL &kp EXCL &kp ENTER>;
            label = "VPCS202011";
        };

        VPCS2020111: VPCS2020111 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(V) &kp LS(P) &kp LS(C) &kp LS(S) &kp N2 &kp N0 &kp N2 &kp N0 &kp EXCL &kp EXCL &kp EXCL &kp ENTER>;
            label = "VPCS2020111";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W  &kp E       &kp R        &kp T                   &kp Y                     &kp U        &kp I      &kp O    &kp P
&kp A           &kp S  &kp D       &lt 4 F      &kp G                   &kp H                     &lt 4 J      &kp K      &kp L    &kp APOS
&mt LEFT_ALT Z  &kp X  &kp C       &kp V        &kp B                   &kp N                     &kp M        &kp COMMA  &kp DOT  &mt LEFT_ALT SLASH
                       &kp ESCAPE  &lt 2 ENTER  &mt LEFT_CONTROL TAB    &mt LEFT_SHIFT BACKSPACE  &lt 1 SPACE  &kp DEL
            >;
        };

        Arrows {
            bindings = <
&bt BT_SEL 2  &kp RG(LEFT_ARROW)  &kp RG(D)    &kp LG(RIGHT)      &VPCS2020111     &trans    &kp HOME         &kp UP_ARROW    &kp END    &trans
&bt BT_SEL 1  &kp LC(LG(LEFT))    &kp LG(TAB)  &kp LC(LG(RIGHT))  &VPCS202011      &Eduardo  &kp LEFT         &kp DOWN_ARROW  &kp RIGHT  &kp MINUS
&kp C_VOL_DN  &kp C_VOL_UP        &kp C_MUTE   &kp RG(PERIOD)     &kp CAPSLOCK     &trans    &kp LC(LS(TAB))  &kp LC(TAB)     &trans     &trans
                                  &trans       &kp PAGE_UP        &kp PAGE_DOWN    &trans    &trans           &trans
            >;
        };

        Numbers {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4        &kp N5          &kp NUMBER_6  &kp N7          &kp N8     &kp N9         &kp N0
&kp EQUAL     &kp PLUS      &kp TILDE     &kp HASH            &trans          &trans        &kp UNDERSCORE  &kp COLON  &kp SEMICOLON  &kp MINUS
&trans        &trans        &trans        &kp RA(LEFT_ARROW)  &kp CAPSLOCK    &trans        &trans          &trans     &trans         &trans
                            &trans        &trans              &trans          &trans        &trans          &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans     &trans    &trans    &kp RA(LEFT)  &trans  &trans  &trans  &trans
&trans  &trans  &mkp MCLK  &mkp MB2  &trans    &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans    &trans    &trans        &trans  &trans  &trans  &trans
                &trans     &mkp MB1  &trans    &trans        &trans  &trans
            >;
        };

        Tabs {
            bindings = <
&kp RC(NUMBER_1)  &kp RC(NUMBER_2)  &kp RC(NUMBER_3)  &kp RC(NUMBER_4)  &kp RC(N5)    &kp RC(NUMBER_6)  &kp RC(N7)  &kp RC(N8)  &kp RC(N9)  &kp RC(N0)
&trans            &trans            &trans            &trans            &trans        &trans            &trans      &trans      &trans      &trans
&trans            &trans            &trans            &trans            &trans        &trans            &trans      &trans      &trans      &trans
                                    &trans            &kp LC(ENTER)     &trans        &trans            &trans      &trans
            >;
        };
    };
};

// //right hand trackball overrides
// &trackball_peripheral_listener {
//     input-processors =
//         <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>,//this gets it to the default installation orientation
//         <&zip_temp_layer 3 500>;//activate layer 3 within 500ms of the trackball moving
// };
// //left hand trackball overrides
// &trackball_central_listener {
//     input-processors = 
//         <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>,//this gets it to the default installation orientation
//         <&zip_xy_scaler 1 3>,//multiply sensitivity by 1, divide by 3 (make it slower for scrolling)
//         <&zip_xy_to_scroll_mapper>,//make this trackball output scrolling events by default instead of cursor movement
//         <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;//invert vertical scrolling so that the view moves in the same direction as the top of the trackball.
// };
